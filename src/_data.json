{"404":{"slug":404,"title":404,"navText":null,"layout":"_layout","body":"<h2 id=\"whoops-looks-like-what-you-re-looking-for-can-t-be-found-\">Whoops. Looks like what you&#39;re looking for can&#39;t be found.</h2>\n","updatedAt":"2017-12-26T06:13:22.981Z"},"index":{"slug":"index","title":"Útil CSS • A CSS Utility Kit","navText":"Intro","layout":"_layout","body":"<h2 id=\"utilities-framework\">Utilities ≠ Framework</h2>\n<p>Útil is not a framework but rather a set of utility classes that allow for rapid layouts.</p>\n<p>Where a framework can be rather opinionated in it&#39;s markup, layout and/or styling, utility classes leave all that up to you and only provide classes that help you layout your site according to your project&#39;s needs.</p>\n<h3 id=\"why-\">Why?</h3>\n<p>This idea was sparked long ago when I read Dave Rupert&#39;s post <a href=\"http://daverupert.com/2013/04/responsive-deliverables/\">Responsive Deliverables</a> wherein he famously wrote <em>&quot;Tiny Bootstraps for Every Client.&quot;</em>:</p>\n<blockquote>\n<p>Responsive deliverables should look a lot like fully-functioning Twitter Bootstrap-style systems custom tailored for your clients’ needs. These living code samples are self-documenting style guides that extend to accommodate a client’s needs as well as the needs of the ever-evolving multi-device web.</p>\n</blockquote>\n<p>Since then, I have been borrowing/stealing pieces of code and conventions from a multitude of frameworks and blog posts. It is only recently that I began compiling and keeping a collection of the best of these frameworks. I&#39;ve also learned a lot from <a href=\"http://basscss.com/\">BassCSS</a> and <a href=\"http://tachyons.io/\">Tachyons</a> and I may have just duplicated their efforts. However, the best way to learn is to build things, and here is my ongoing effort to build something useful for myself. I&#39;ve also borrowed code from <a href=\"http://getskeleton.com/\">Skeleton</a>, whose simplicity I&#39;ve loved for many years.</p>\n<p>I&#39;ve made a few decisions that I think are important to keep in mind:</p>\n<ol>\n<li>No CSS pre/post processors (more on this later)</li>\n<li>No prefixes. These can be added a variety of ways in your build process.</li>\n<li>No JavasScript. All your JavaScript fanciness is up to you.</li>\n</ol>\n<p>And on to the good parts...</p>\n<h3 id=\"mobile-first\">Mobile First</h3>\n<p>All classes use the same mobile-first approach. This means that any class without a modifier will be applied to all screens starting from mobile, or small, screens all the way up to large screens.</p>\n<p>For example, to hide or use <code>display: none</code> on all screens, you can add a <code>none</code> class like so:</p>\n<pre><code>&lt;div class=&quot;none&quot;&gt;This will not display on any screen&lt;/div&gt;\n</code></pre><p>However, if you would only like to hide it on medium to large screens, you can do the following:</p>\n<pre><code>&lt;div class=&quot;none-m&quot;&gt;This will not display on medium to large screens&lt;/div&gt;\n</code></pre><p>You can also reverse the display character if by adding a <code>block</code>, <code>inline-block</code> or <code>inline</code> class. If, for instance, you want to hide a div on mobile screens, you can do the following:</p>\n<pre><code>&lt;div class=&quot;none block-m&quot;&gt;This will not display on any mobile screens&lt;/div&gt;\n</code></pre><p>All classes will have the <code>-m</code> or <code>-l</code> modifiers available.</p>\n","updatedAt":"2017-12-30T20:44:13.642Z"}}